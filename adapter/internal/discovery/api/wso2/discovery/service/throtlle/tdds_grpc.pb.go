// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package throttle

import (
	context "context"
	v3 "github.com/envoyproxy/go-control-plane/envoy/service/discovery/v3"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// ThrottleDataDiscoveryServiceClient is the client API for ThrottleDataDiscoveryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ThrottleDataDiscoveryServiceClient interface {
	StreamThrottleData(ctx context.Context, opts ...grpc.CallOption) (ThrottleDataDiscoveryService_StreamThrottleDataClient, error)
	FetchThrottleData(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error)
}

type throttleDataDiscoveryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewThrottleDataDiscoveryServiceClient(cc grpc.ClientConnInterface) ThrottleDataDiscoveryServiceClient {
	return &throttleDataDiscoveryServiceClient{cc}
}

func (c *throttleDataDiscoveryServiceClient) StreamThrottleData(ctx context.Context, opts ...grpc.CallOption) (ThrottleDataDiscoveryService_StreamThrottleDataClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ThrottleDataDiscoveryService_serviceDesc.Streams[0], "/discovery.service.throttle.ThrottleDataDiscoveryService/StreamThrottleData", opts...)
	if err != nil {
		return nil, err
	}
	x := &throttleDataDiscoveryServiceStreamThrottleDataClient{stream}
	return x, nil
}

type ThrottleDataDiscoveryService_StreamThrottleDataClient interface {
	Send(*v3.DiscoveryRequest) error
	Recv() (*v3.DiscoveryResponse, error)
	grpc.ClientStream
}

type throttleDataDiscoveryServiceStreamThrottleDataClient struct {
	grpc.ClientStream
}

func (x *throttleDataDiscoveryServiceStreamThrottleDataClient) Send(m *v3.DiscoveryRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *throttleDataDiscoveryServiceStreamThrottleDataClient) Recv() (*v3.DiscoveryResponse, error) {
	m := new(v3.DiscoveryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *throttleDataDiscoveryServiceClient) FetchThrottleData(ctx context.Context, in *v3.DiscoveryRequest, opts ...grpc.CallOption) (*v3.DiscoveryResponse, error) {
	out := new(v3.DiscoveryResponse)
	err := c.cc.Invoke(ctx, "/discovery.service.throttle.ThrottleDataDiscoveryService/FetchThrottleData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ThrottleDataDiscoveryServiceServer is the server API for ThrottleDataDiscoveryService service.
// All implementations must embed UnimplementedThrottleDataDiscoveryServiceServer
// for forward compatibility
type ThrottleDataDiscoveryServiceServer interface {
	StreamThrottleData(ThrottleDataDiscoveryService_StreamThrottleDataServer) error
	FetchThrottleData(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error)
	mustEmbedUnimplementedThrottleDataDiscoveryServiceServer()
}

// UnimplementedThrottleDataDiscoveryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedThrottleDataDiscoveryServiceServer struct {
}

func (UnimplementedThrottleDataDiscoveryServiceServer) StreamThrottleData(ThrottleDataDiscoveryService_StreamThrottleDataServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamThrottleData not implemented")
}
func (UnimplementedThrottleDataDiscoveryServiceServer) FetchThrottleData(context.Context, *v3.DiscoveryRequest) (*v3.DiscoveryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchThrottleData not implemented")
}
func (UnimplementedThrottleDataDiscoveryServiceServer) mustEmbedUnimplementedThrottleDataDiscoveryServiceServer() {
}

// UnsafeThrottleDataDiscoveryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ThrottleDataDiscoveryServiceServer will
// result in compilation errors.
type UnsafeThrottleDataDiscoveryServiceServer interface {
	mustEmbedUnimplementedThrottleDataDiscoveryServiceServer()
}

func RegisterThrottleDataDiscoveryServiceServer(s grpc.ServiceRegistrar, srv ThrottleDataDiscoveryServiceServer) {
	s.RegisterService(&_ThrottleDataDiscoveryService_serviceDesc, srv)
}

func _ThrottleDataDiscoveryService_StreamThrottleData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ThrottleDataDiscoveryServiceServer).StreamThrottleData(&throttleDataDiscoveryServiceStreamThrottleDataServer{stream})
}

type ThrottleDataDiscoveryService_StreamThrottleDataServer interface {
	Send(*v3.DiscoveryResponse) error
	Recv() (*v3.DiscoveryRequest, error)
	grpc.ServerStream
}

type throttleDataDiscoveryServiceStreamThrottleDataServer struct {
	grpc.ServerStream
}

func (x *throttleDataDiscoveryServiceStreamThrottleDataServer) Send(m *v3.DiscoveryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *throttleDataDiscoveryServiceStreamThrottleDataServer) Recv() (*v3.DiscoveryRequest, error) {
	m := new(v3.DiscoveryRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _ThrottleDataDiscoveryService_FetchThrottleData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(v3.DiscoveryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ThrottleDataDiscoveryServiceServer).FetchThrottleData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/discovery.service.throttle.ThrottleDataDiscoveryService/FetchThrottleData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ThrottleDataDiscoveryServiceServer).FetchThrottleData(ctx, req.(*v3.DiscoveryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ThrottleDataDiscoveryService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "discovery.service.throttle.ThrottleDataDiscoveryService",
	HandlerType: (*ThrottleDataDiscoveryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchThrottleData",
			Handler:    _ThrottleDataDiscoveryService_FetchThrottleData_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamThrottleData",
			Handler:       _ThrottleDataDiscoveryService_StreamThrottleData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "wso2/discovery/service/throtlle/tdds.proto",
}
